#!/usr/bin/env python
"""
Script de prueba para verificar las actualizaciones en tiempo real
"""
import os
import sys
import django
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from conversaciones.models import Conversacion, Mensaje
from django.contrib.auth.models import User
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

def test_websocket_notification():
    """Prueba las notificaciones WebSocket"""
    try:
        channel_layer = get_channel_layer()
        
        # Enviar notificaci√≥n de prueba
        async_to_sync(channel_layer.group_send)(
            'conversaciones_list',
            {
                'type': 'actualizar_lista',
                'mensaje': 'Prueba de notificaci√≥n en tiempo real'
            }
        )
        
        print("‚úÖ Notificaci√≥n WebSocket enviada correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error enviando notificaci√≥n WebSocket: {e}")
        return False

def test_api_estadisticas():
    """Prueba la API de estad√≠sticas"""
    try:
        from conversaciones.views import api_estadisticas_tiempo_real
        from django.test import RequestFactory
        from django.contrib.auth.models import AnonymousUser
        
        factory = RequestFactory()
        request = factory.get('/conversaciones/api/estadisticas/')
        
        # Crear usuario de prueba con permisos
        user = User.objects.filter(is_superuser=True).first()
        if not user:
            print("‚ùå No hay usuarios superuser para la prueba")
            return False
        
        request.user = user
        
        response = api_estadisticas_tiempo_real(request)
        
        if response.status_code == 200:
            print("‚úÖ API de estad√≠sticas funciona correctamente")
            return True
        else:
            print(f"‚ùå API de estad√≠sticas fall√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error probando API de estad√≠sticas: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas de tiempo real...")
    print("=" * 50)
    
    # Verificar configuraci√≥n de Channels
    if hasattr(settings, 'CHANNEL_LAYERS'):
        print("‚úÖ Django Channels configurado")
    else:
        print("‚ùå Django Channels no configurado")
        return
    
    # Verificar ASGI
    if hasattr(settings, 'ASGI_APPLICATION'):
        print("‚úÖ ASGI Application configurada")
    else:
        print("‚ùå ASGI Application no configurada")
        return
    
    print("\nüìä Probando funcionalidades...")
    print("-" * 30)
    
    # Probar WebSocket
    test_websocket_notification()
    
    # Probar API
    test_api_estadisticas()
    
    print("\nüìã Estad√≠sticas actuales:")
    print("-" * 30)
    
    # Mostrar estad√≠sticas actuales
    chats_no_atendidos = Conversacion.objects.filter(operador_asignado=None, estado='activa').count()
    total_conversaciones = Conversacion.objects.count()
    
    print(f"Total de conversaciones: {total_conversaciones}")
    print(f"Chats no atendidos: {chats_no_atendidos}")
    
    print("\n‚úÖ Pruebas completadas!")
    print("\nüìù Para usar las actualizaciones en tiempo real:")
    print("1. Aseg√∫rate de que el servidor est√© corriendo con ASGI")
    print("2. Abre la p√°gina de conversaciones en el navegador")
    print("3. Los contadores se actualizar√°n autom√°ticamente")
    print("4. Las notificaciones aparecer√°n cuando haya cambios")

if __name__ == '__main__':
    main()